[section Behind the Interface]

The key property of the ['Pimpl] idiom is that the implementation is private. Not only notionally declared as such, not merely separated into another (as visible) class or a header file, but truly internal and hidden (from the user). Behind the public interface it is all for developers to implement, to optimize, to modify, to improve as they need. 

Still, the deployment pattern is fairly straightforward to follow and reasonably self-documented. Something like the following will be tucked away in an implementation file: 

 template<> struct pimpl<Book>::implementation
 {
    implementation(string const& the_title, string const& the_author)
    :
        title(the_title), author(the_author), price(0)
    {}
    ...
    bool check_isbn_10_digit();
    ...
    string  title;
    string author;
    int     price;
 };
  
 Book::Book(string const& title, string const& author) : pimpl_type(title, author) {}
 
 string const& Book::author () const { return (*this)->author; }
 void          Book:: price (int new_price) { (*this)->price = new_price; }

 bool
 Book::some_function() const
 {  ...
    bool is_valid = (*this)->check_isbn_10_digit();
    ...
 }
 
As mentioned earlier, if comparison functionality is required, a class with value semantics will have to implement something like the following:  
 
 bool
 Book::operator==(Book const& other) const
 {
    implementation const& impl = **this;
    return impl.title == other->title && impl.author == other->author;
 }
 
Here the ['pimpl<Book>::implementation] is again a ['struct] rather than a ['class]. As long as the ['pimpl<Book>::implementation] implementation is local to one file, there is generally little value in making it a class. 

Again, the public ['Book] class describes and implements the ['public interface] (behavior) and the internal ['pimpl<Book>::implementation] encapsulates ['private implementation] (data and behavior).

[note :-) Another reconciliatory and unifying feature is that we do not have to follow (and fight over) a particular naming convention to draw attention to member variables (like the leading or trailing underscores, the 'm_' prefix or the myriad others). Member variables are named naturally and accessed and identified as ['impl.title] or ['(*this)->title] or something of that sort.]

[endsect]
