[section pimpl::null()]

Again, ['Pimpl] exhibits a considerably stronger (and automatically managed) association between the external interface and internal implementation. Hence, 

[note the default behavior is that there is always an implementation data behind every interface object.] 

Still the ['Pimpl] technique of breaking one monolythic object in to two  (a light-weight interface proxy and internal implementation) provides us with an easy opportunity to have a useful invalid-['Pimpl] concept implemented. That would seem unreasonable (and less efficient) not to have such functionality or to have it implemented by other means (for example, ['std::optional]).

 // Use invalid pimpl to break the default interface-implementation association
 Book::Book() : pimpl_type(pimpl<Book>::null())
 {
    // An invalid Book object is created with no implementation behind it
 }
 
 void
 Book::do_something()
 {
    if (!*this)
    {
        // Implementation is created later.
        this->reset(new implementation(...));
    }
    ...
 } 
 
In the example the underlying ['pimpl_type] and, threrefore, Book are created invalid (like ['nullptr] or an empty ['std::shared_ptr())]. Later a ['pimpl<Book>::implementation] instance is explicitly created and the ['pimpl_type] is assigned to manage it. 

Invalid ['Pimpl] is useful for lazy-instantiation optimization (as in the example above) or to support dynamic polymorphism that is discussed later. It might be used to indicate a no-book condition in the same fashion as ['nullptr] or ['boost::optional] might be used: 

 Book
 find_book()
 {  ...
    return pimpl<Book>::null(); // found nothing, return an invalid Book
 }
 ...
 if (Book book = find_book()) do something useful;
 else                         report book-not-found;
 
[endsect] 

