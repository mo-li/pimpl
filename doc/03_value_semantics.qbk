[section Pimpl with Value Semantics]

['Pimpl] with ['value semantics] exhibits different relationship with the underlying data. It solely owns and manages the data (rather than shares). Consequently, for such ['Pimpls] manual implementation gets more involved and might look as follows:

 struct Book
 {
   ~Book ();
    Book (string const& title, string const& author);
    Book (Book const&);
    Book& operator=(Book const&);
  
    string const&  title() const;
    string const& author() const;
    
    // If Books need to be comparable
    bool operator==(Book const&) const;
    bool operator!=(Book const&) const;
  
    private:
  
    struct implementation;
    implementation* impl_;
 };

In the example above it is very tempting to deploy ['std::unique_ptr<implementation>] instead of the raw ['implementation*] and, in fact, that is what H. Sutter advocates in [link 13 \[13\]], [link 14 \[14\]]. Unfortunately, ['std::unique_ptr] as its predecessor ['std::auto_ptr] have been developed with very different goals in mind. Importantly, they lack the incomplete-type management functionality and require ['Book::implementation] to be a complete type (see [link 13 \[13\]] for details). Consequently, ['std::unique_ptr] deployment hardly reduces the amount of manually-written code (the copy constructor, the assignment operator, even the explicit non-default non-inlined destructor are still needed). That all but wipes out the benefits of ['std::unique_ptr] deployment in this particular context. 

['std::shared_ptr] does not have such a restriction and was deployed in the previous chapter for the ['Pimpls] with pointer semantics. Similarly the internal ['pimpl::value_ptr] also implements the incomplete-type management technique (originally by Peter Dimov) and is deployed for the ['Pimpls] with value semantics. Consequently, the code above shrinks down to: 

 struct Book : public pimpl<Book>::unique
 {
    Book(string const& title, string const& author);
    
    string const&  title() const;
    string const& author() const;

    // If Books need to be comparable
    bool operator==(Book const&) const;
    bool operator!=(Book const&) const;
 };

with no loss in functionality and with the same benefits as before -- shorter, application-focused and reasonably self-documented.

A notable difference (compared to pointer-semantics classes) is that the comparison operators are not freebies. In fact, they are never freebies (they are never auto-generated). However, in the case of the pointer-semantics classes those comparison operators are reduced to pointer comparisons and generalized. That's not the case with the value-semantics classes. Consequently, for value-semantics classes the comparison operators become part of the ['user-provided interface] (if such a class needs to be comparable).
  
So far both examples of ['Pimpl]-based ['Book] classes (with pointer- and value-semantics) look almost identical and internal implementations (as we'll see later) are as close. That property is important for orderly and healthy evolution of commercial large-scale systems as it allows to minimize the impact of a requirement change -- something as inevitable as "death and taxes". 

[endsect]

