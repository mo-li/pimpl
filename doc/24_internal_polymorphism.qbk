[section Internal (Implementation-Only) Run-Time Polymorphism]

For details and explanations see the ['Non-Virtual Interface] idiom in [link 11 \[11\]] and Rule #39 in [link 12 \[12\]].

 struct Book : public pimpl<Book>::pointer_semantics // The public interface class is not virtual
 {
    Book(parameters);
    
    string const&  title() const;
    string const& author() const;
 };

 template<> struct pimpl<Book>::implementation
 {
    implementation(parameters) {...}

    virtual ~implementation() {...}
 }

 struct Implementation1 : public pimpl<Book>::implementation
 {
    Implementation1() : implementation(parameters) {}
 };

 struct Implementation2 : public pimpl<Book>::implementation
 {
    Implementation2() : implementation(parameters) {}
 };

 Book::Book(parameters) : base_type(null())
 {
    reset(some_condition ? new Implementation1(parameters) : new Implementation2(parameters));
 }

[endsect]
