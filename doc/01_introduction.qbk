[section Introduction]

In the domain of commercial large-scale software development the following design principles come to the fore:

* API-centered design, 
* implementation hiding, 
* consistent and recognizable implementation and deployment patterns, 
* minimization of compilation and component dependencies, 
* separation of concerns ([link 8 \[8\]], [link 9 \[9\]]),
* multi-platform support.

The ['Pimpl] idiom can help great deal achieving these goals. It is a simple yet robust programming technique to minimize coupling via 

* the separation of ['public interface] and ['private implementation] and then 
* implementation hiding. 

Popularized by Sutter ([link 2 \[2\]], [link 3 \[3\]], [link 11 \[11\]], [link 12 \[12\]], [link 13 \[13\]], [link 14 \[14\]]) under the cheeky ['Pimpl] name (as for "pointer to implementation" in Hungarian notation) the technique has been known long before under various names -- the D-pointer (in Qt), the Cheshire Cat in [link 4 \[4\]], the Handle/Body in [link 5 \[5\]], the Bridge in [link 6 \[6\]] -- and conceptually deployed in C and C++ as far back as at least early eighties ([link 7 \[7\]]).

Still, it does not seem to be sufficiently widely deployed. In part that might be due to efficiency considerations (valid or misguided) and probably more often due to additional implementation-related overhead associated with the technique. 

This one-header "library" provides a programming building block and a deployment pattern in an attempt to minimize the hassle, to ease and to formalize the deployment of the idiom.

[endsect]
