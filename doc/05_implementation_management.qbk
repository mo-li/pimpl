[section Implementation Management]

As demonstrated in the previous sections the conventional ['Pimpl] idiom deployments ultimately boil down to an opaque pointer to the internal/private implementation which is allocated on the memory heap.

In that regard it might be tempting to see the ['Pimpl] idiom as merely yet another variation of the smart-pointer idiom and to a certain degreee that is. However, the similarity with ['std::shared_ptr] and the likes should not be exaggerated. ['Pimpl] behaves like a proxy and its primary goal is ['implementation hiding]. For ['Pimpl] the smart-pointer behavior is somewhat incidental (an implementation detail) and optional rather than the primary design objective. Indeed, only ['Pimpls] with pointer semantics advertise and make available smart-pointer behavior to the user. More so, some unconventional high-efficiency value-semantics ['Pimpl] implementations might not even be opaque-pointer-based and memory-heap-based.

Consequently, ['Pimpl] possesses far stronger association (and deliberate coupling) between the external interface and internal implementation classes. When the family of smart-pointer classes (['std::unique_ptr], ['std::shared_ptr] and the like) take good care of managing objects ['after] they are ['manually and explicitly] created, ['Pimpl] fully hides (from the user), encapsulates, automates internal-data management. That is reflected in the ['Pimpl]-based class deployment pattern. For our ['Book] class instead of the smart-pointer style: 

 // Incorrect Pimpl deployment
 Book::Book(string const& title, string const& author)
 :
    pimpl_type(new pimpl<Book>::implementation(title, author))
 {}
 
we write:

 // Correct Pimpl deployment
 Book::Book(string const& title, string const& author)
 :
    pimpl_type(title, author)
 {} 
 
All arguments passed to the ['pimpl_type] are forwarded to the corresponding ['pimpl<Book>::implementation] constructor. Otherwise, the respective ['Book] constructor fails to compile if a suitable ['pimpl<Book>::implementation] constructor is not found. 

That ['perfect-forwarding] mechanism is generic and, consequently, works for the default constructor as well. That is, 

 Book::Book() : pimpl_type() {}
 
or the same but not as explicit  
 
 Book::Book() {}
 
will try to call ['pimpl<Book>::implementation::implementation()] and will fail if there is no such.

[endsect]

